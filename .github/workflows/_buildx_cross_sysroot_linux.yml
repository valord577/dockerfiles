name: _buildx_cross_sysroot_linux
on:
  workflow_call:
    inputs:
      SYSROOT_LINUX_HEADER_UAPI:
        required: true
        type: string
      SYSROOT_LIBSTDCXX_GCC_VER:
        required: true
        type: string

env:
  GH_TOKEN: ${{ github.token }}
  GH_OSSUTIL_AK: ${{ secrets.GH_OSSUTIL_AK }}
  GH_OSSUTIL_SK: ${{ secrets.GH_OSSUTIL_SK }}
  GH_OSSUTIL_BUCKET: ${{ secrets.GH_OSSUTIL_BUCKET }}
  GH_OSSUTIL_REGION: ${{ secrets.GH_OSSUTIL_REGION }}
  GH_OSSUTIL_PKGS: ${{ secrets.GH_OSSUTIL_PKGS }}
  GH_OSSUTIL_CNAME: ${{ secrets.GH_OSSUTIL_CNAME }}

jobs:
  _buildx:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ github.workspace }}
    env:
      _PUSH: false
      _image_name_: cross-sysroot-linux${{ inputs.SYSROOT_LINUX_HEADER_UAPI }}-gcc${{ inputs.SYSROOT_LIBSTDCXX_GCC_VER }}
    steps:
      - name: Set ENV `_PUSH=true`
        if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
        run: echo "_PUSH=true" >> "$GITHUB_ENV"
      - name: Set ENV `DOCKER_BUILD_VERSION`
        run: |
          _COMMIT_SHA_=${{ github.sha }}
          echo "DOCKER_BUILD_VERSION=$(date -u '+%Y%m%dT%H%M%SZ' )-${_COMMIT_SHA_:0:7}" >> "$GITHUB_ENV"
      - name: Checkout Source Code
        uses: actions/checkout@v4
      - name: Set up Docker QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest
          platforms: linux/amd64,linux/arm64
      - name: Login to Docker Hub
        if: ${{ env._PUSH == 'true' }}
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSCODE }}
      - name: Login to Aliyun ACR
        if: ${{ env._PUSH == 'true' }}
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.REGISTRY_ALIYUN_ACR }}
          username: ${{ secrets.ALIYUN_ACR_USERNAME }}
          password: ${{ secrets.ALIYUN_ACR_PASSCODE }}
      - name: Pull Cross Sysroot
        working-directory: ${{ github.workspace }}/cross-sysroot-linux
        run: |
          _archive_prefix_="crosstool-linux${{ inputs.SYSROOT_LINUX_HEADER_UAPI }}-gcc${{ inputs.SYSROOT_LIBSTDCXX_GCC_VER }}"

          ${{ github.workspace }}/.github/oss_v4.py pull "${_archive_prefix_}-target-ct-amd64-glibc.tar.gz" "${_archive_prefix_}-target-ct-amd64-glibc.tar.gz"
          ${{ github.workspace }}/.github/oss_v4.py pull "${_archive_prefix_}-target-ct-arm64-glibc.tar.gz" "${_archive_prefix_}-target-ct-arm64-glibc.tar.gz"
          ${{ github.workspace }}/.github/oss_v4.py pull "${_archive_prefix_}-target-ct-armhf-glibc.tar.gz" "${_archive_prefix_}-target-ct-armhf-glibc.tar.gz"
          ${{ github.workspace }}/.github/oss_v4.py pull "${_archive_prefix_}-target-ct-amd64-musl.tar.gz"  "${_archive_prefix_}-target-ct-amd64-musl.tar.gz"
          ${{ github.workspace }}/.github/oss_v4.py pull "${_archive_prefix_}-target-ct-arm64-musl.tar.gz"  "${_archive_prefix_}-target-ct-arm64-musl.tar.gz"
      - name: Build Image and Push
        uses: docker/build-push-action@v6
        with:
          pull: true
          push: ${{ env._PUSH }}
          context: cross-sysroot-linux
          platforms: linux/amd64,linux/arm64
          build-args: |
            SYSROOT_LINUX_HEADER_UAPI=${{ inputs.SYSROOT_LINUX_HEADER_UAPI }}
            SYSROOT_LIBSTDCXX_GCC_VER=${{ inputs.SYSROOT_LIBSTDCXX_GCC_VER }}
          tags: |
            ${{ vars.DOCKER_HUB_USERNAME }}/${{ env._image_name_ }}:latest
            ${{ vars.DOCKER_HUB_USERNAME }}/${{ env._image_name_ }}:${{ env.DOCKER_BUILD_VERSION }}
            ${{ vars.REGISTRY_ALIYUN_ACR }}/${{ vars.DOCKER_HUB_USERNAME }}/${{ env._image_name_ }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
